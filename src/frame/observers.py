'''
Created on 2009-12-14

@author:  Mathieu Gagnon
@contact: mathieu.gagnon.10@ulaval.ca
@organization: Universite Laval

@license

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
'''
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'observers.ui'
#
# Created: Mon Dec 14 10:32:01 2009
#      by: PyQt4 UI code generator 4.6
#
# WARNING! All changes made in this file will be lost!

from PyQt4 import QtCore
from PyQt4 import QtGui
from model.ObserversModel import TableObserverDataModel
from controller.ObserverDelegate import ObserverDataDelegate

class Ui_observers(object):
    '''
    This class is an automatically generated python file using the pyuic4 program and .ui file generated by Qt_Designer
    This class is the mainWindow's tab containing the observer information of the simulation
    '''
    def __init__(self, parent):
        '''
        @summary Constructor
        @param parent: application's mainWindow
        '''
        self.parent = parent
        
    def setupUi(self, observers):
        
        observers.setObjectName("observers")
        #Creating the different layouts 
        #Main Layout
        self.mainLayout = QtGui.QVBoxLayout()
        #Main Layout and its widgets
        #Label
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setWeight(75)
        font.setBold(True)
        
        self.labelObservers = QtGui.QLabel()
        self.labelObservers.setObjectName("labelObservers")
        self.labelObservers.setFont(font)
        self.labelObserversData = QtGui.QLabel()
        self.labelObserversData.setObjectName("labelObserversData")
        self.labelObserversData.setFont(font)
        
        #Main horizontal layout
        self.horizontalLayout = QtGui.QHBoxLayout()
        
        #ListView
        self.clockObservers = ArrowsAwareListView()
        self.clockObservers.setObjectName("clockObservers")
        
        #TableView
        self.clockObserversData = QtGui.QTableView()
        self.clockObserversData.verticalHeader().hide()
        #Left Vertical Layout
        self.verticalLayoutLeft = QtGui.QVBoxLayout()
        self.verticalLayoutLeft.addWidget(self.labelObservers)
        self.verticalLayoutLeft.addWidget(self.clockObservers)
        #Right Vertical Layout
        self.verticalLayoutRight = QtGui.QVBoxLayout()
        self.verticalLayoutRight.addWidget(self.labelObserversData)
        self.verticalLayoutRight.addWidget(self.clockObserversData)
        
        
        self.horizontalLayout.addLayout(self.verticalLayoutLeft)
        self.horizontalLayout.addLayout(self.verticalLayoutRight)
        
        #LAyout of the Add/Delete Buttons
        self.horizontalLayout_5 = QtGui.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        
        #Creating and adding the Buttons
        self.add_clock_observer = QtGui.QPushButton()
        self.add_clock_observer.setObjectName("add_clock")
        self.add_clock_observer.setFixedSize(77,25)
        self.horizontalLayout_5.addWidget(self.add_clock_observer)
        self.delete_clock_observer = QtGui.QPushButton()
        self.delete_clock_observer.setObjectName("delete_clock")
        self.delete_clock_observer.setFixedSize(77,25)
        self.horizontalLayout_5.addWidget(self.delete_clock_observer)
        self.horizontalLayout_5.addItem(QtGui.QSpacerItem(100, 30, QtGui.QSizePolicy.Expanding))
        
        #Adding the Layout to their respective place
        self.mainLayout.addLayout(self.horizontalLayout)
        self.mainLayout.addLayout(self.horizontalLayout_5)  
        
        #ListView preference
        self.clockObservers.setDragEnabled(True)
        self.clockObservers.setAcceptDrops(True)
        self.clockObservers.setDropIndicatorShown(True)
        self.clockObservers.setDragDropMode(QtGui.QAbstractItemView.InternalMove)
        self.clockObservers.setDefaultDropAction(QtCore.Qt.DropAction(QtCore.Qt.MoveAction))
        #self.clockObservers.horizontalHeader().setResizeMode(QtGui.QHeaderView.Stretch)
        self.clockObservers.setDragDropOverwriteMode(False)
        
        #Setting the layout to the tab widget
        observers.setLayout(self.mainLayout)
        #Setting margins and spacings
        self.horizontalLayout_5.setSpacing(10)
        self.mainLayout.setMargin(50)
        #PyUic4 Auto-Generated code and connections
        QtCore.QMetaObject.connectSlotsByName(observers)
        self.retranslateUi(observers)
        self.connect(self.add_clock_observer,QtCore.SIGNAL("clicked()"),self.addClockObserver)
        self.connect(self.delete_clock_observer,QtCore.SIGNAL("clicked()"),self.deleteClockObserver)
        self.connect(self.clockObservers,QtCore.SIGNAL("deleteObserver()"),self.deleteClockObserver)
        self.connect(self.clockObservers,QtCore.SIGNAL("clicked(QModelIndex)"),self.loadObserverData)
        
    def retranslateUi(self, observers):
        '''
        @summary Function allowing naming of the different labels regardless of app's language
        '''
        observers.setWindowTitle(QtGui.QApplication.translate("observers", "Dialog", None, QtGui.QApplication.UnicodeUTF8))
        self.add_clock_observer.setText(QtGui.QApplication.translate("observers", "Add", None, QtGui.QApplication.UnicodeUTF8))
        self.delete_clock_observer.setText(QtGui.QApplication.translate("observers", "Delete", None, QtGui.QApplication.UnicodeUTF8))
        self.labelObservers.setText(QtGui.QApplication.translate("observers", "Clock observers :", None, QtGui.QApplication.UnicodeUTF8))
        self.labelObserversData.setText(QtGui.QApplication.translate("observers", "Observer data :", None, QtGui.QApplication.UnicodeUTF8))
        
    def addClockObserver(self):
        '''
        @summary Add clock observer
        '''
        if self.clockObservers.state() == QtGui.QTableView.EditingState:
            return
        if self.clockObservers.selectedIndexes() and len(self.clockObservers.selectedIndexes()) == 1:
            self.clockObservers.model().addObserver(self.clockObservers.selectedIndexes()[0].row())
            self.clockObservers.setCurrentIndex(self.clockObservers.model().index(self.clockObservers.selectedIndexes()[0].row(),0))
            self.clockObservers.edit(self.clockObservers.currentIndex())
        else:
            self.clockObservers.model().addObserver(self.clockObservers.model().rowCount())
            self.clockObservers.setCurrentIndex(self.clockObservers.model().index(self.clockObservers.model().rowCount()-1,0))
            self.clockObservers.edit(self.clockObservers.currentIndex())
        
    def deleteClockObserver(self):
        '''
        @summary Removes the currently selected clock observer(s)
        '''
        if len(self.clockObservers.selectedIndexes()) > 1:
            self.clockObservers.model().specialRemove([index for index in self.clockObservers.selectedIndexes()])
            self.clockObservers.clearSelection()
            return
        
        elif len(self.clockObservers.selectedIndexes()):
            self.clockObservers.model().removeProcess(self.clockObservers.selectedIndexes()[0])
            self.clockObservers.clearSelection()

    def loadObserverData(self,observerIndex):
        '''
        @summary Loads the data associated with the currently selected observer
        @param observerIndex : observer's index in model/tree view
        '''
        self.clockObserversData.setModel(TableObserverDataModel(observerIndex.model().getCurrentObserverNode(observerIndex),self.clockObserversData,self.parent))
        self.clockObserversData.setItemDelegate(ObserverDataDelegate(self.clockObserversData,self.parent))
        
class ArrowsAwareListView(QtGui.QListView):
    '''
    This class slightly modify Qt's QListView class
    Navigating the TableView with arrows will generate the same signal as if the user was using the mouse buttons
    This way, clock observers table view will be loaded with appropriate model like if user had pressed the left mouse button
    '''
    def __init__(self):
        '''
        @summary Constructor 
        '''
        QtGui.QListView.__init__(self)
        
    def keyPressEvent(self,event):
        '''
        @summary Reimplementation of QTableView's keyPressEvent function
        @param event : see QTableView's documentation for more information
        '''
        super(ArrowsAwareListView, self).keyPressEvent(event)
        if event.key() == QtCore.Qt.Key_Delete and not self.state() == QtGui.QAbstractItemView.EditingState:
            self.emit(QtCore.SIGNAL("deleteObserver()"))