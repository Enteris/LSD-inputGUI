'''
Created on 2010-04-06

@author:  Mathieu Gagnon
@contact: mathieu.gagnon.10@ulaval.ca
@organization: Universite Laval

@license

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
'''

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'newPopTab_mockup1a.ui'
#
# Created: Tue Apr  6 11:47:57 2010
#      by: PyQt4 UI code generator 4.7
#
# WARNING! All changes made in this file will be lost!

import os

from PyQt4 import QtCore, QtGui

class Ui_Form(object):
    '''
    This class is an automatically generated python file using the pyuic4 program and .ui file generated by Qt_Designer
    This class is a dialog allowing the user to choose which demography is going to be the base of its newly created profile
    It also allows the user to choose if simulation variables and accept function are going to be copied from another profile at creation
    '''
    def __init__(self, parent):
        '''
        @summary Constructor
        @param parent: population tab
        '''
        self.parent = parent
        
    def setupUi(self, Form):
        
        Form.setObjectName("Form")
        #Creating Layouts
        self.layoutProfileName = QtGui.QHBoxLayout()
        self.layoutProfileCopySimVar = QtGui.QHBoxLayout()
        self.layoutProfileCopyAccFunc = QtGui.QHBoxLayout()
        self.mainLayout = QtGui.QVBoxLayout()
        
        #OK/Cancel buttons
        self.buttonBox = QtGui.QDialogButtonBox()
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtGui.QDialogButtonBox.Cancel | QtGui.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        
        #Widget containing the located demography files
        self.tableWidget = QtGui.QTableWidget()
        self.tableWidget.setObjectName("tableWidget")
        dirTree = os.walk("./database")
        self.tableWidget.setColumnCount(1)
        self.tableWidget.setHorizontalHeaderItem(0, QtGui.QTableWidgetItem("Population"))
        for element in dirTree:
            for files in element[2]:
                extension = os.path.splitext(files)
                if extension[1] == ".xml":
                    self.tableWidget.insertRow(0)
                    newItem = QtGui.QTableWidgetItem(files)
                    newItem.setData(QtCore.Qt.UserRole, element[0]+"/"+files)
                    self.tableWidget.setItem(0,0,newItem)
        
        self.tableWidget.horizontalHeader().resizeSections(QtGui.QHeaderView.ResizeToContents)
        self.tableWidget.sortItems(0)
        #TableWidget size policy
        self.tableWidget.setMaximumSize(600, 300)
        self.tableWidget.setSizePolicy(QtGui.QSizePolicy.Expanding,QtGui.QSizePolicy.Expanding)
        
        self.label_name = QtGui.QLabel("Profile's name :")
        self.label_name.setFixedSize(110,22)
        self.label_sim_Variable = QtGui.QLabel("Use same simulation variables as :")
        self.label_sim_Variable.setFixedSize(230,22)
        self.label_acceptFunction= QtGui.QLabel("Use same accept function as :")
        self.label_acceptFunction.setFixedSize(230,22)
        
        self.lineEdit_name = QtGui.QLineEdit()
        self.lineEdit_name.setFixedWidth(150)
        self.comboBox_simVariable = QtGui.QComboBox()
        self.comboBox_simVariable.setFixedHeight(25)
        self.comboBox_simVariable.setSizeAdjustPolicy(QtGui.QComboBox.AdjustToContents)
        self.comboBox_simVariable.setSizePolicy(QtGui.QSizePolicy.Maximum,QtGui.QSizePolicy.Fixed)
        self.comboBox_acceptFunction = QtGui.QComboBox()
        self.comboBox_acceptFunction.setFixedHeight(25)
        self.comboBox_acceptFunction.setSizeAdjustPolicy(QtGui.QComboBox.AdjustToContents)
        self.comboBox_acceptFunction.setSizePolicy(QtGui.QSizePolicy.Maximum,QtGui.QSizePolicy.Fixed)
        self.label = QtGui.QLabel("Available demographies :")
        self.label.setFixedSize(200,22)       
        self.pushButton_add = QtGui.QPushButton("Add from file system ")
        self.pushButton_add.setFixedSize(150,25)
        #SettingLayouts
        #Name
        self.layoutProfileName.addWidget(self.label_name)
        self.layoutProfileName.addWidget(self.lineEdit_name)
        self.layoutProfileName.setAlignment(QtCore.Qt.AlignLeft)
        #Sim Variables
        self.layoutProfileCopySimVar.addWidget(self.label_sim_Variable)
        self.layoutProfileCopySimVar.addWidget(self.comboBox_simVariable)
        self.layoutProfileCopySimVar.setAlignment(QtCore.Qt.AlignLeft)
        #Accept function
        self.layoutProfileCopyAccFunc.addWidget(self.label_acceptFunction)
        self.layoutProfileCopyAccFunc.addWidget(self.comboBox_acceptFunction)
        self.layoutProfileCopyAccFunc.setAlignment(QtCore.Qt.AlignLeft)
        #Setting principal layout
        self.mainLayout.addLayout(self.layoutProfileName)
        self.mainLayout.addWidget(self.label)
        self.mainLayout.addWidget(self.tableWidget)
        self.mainLayout.addWidget(self.pushButton_add)
        self.mainLayout.addLayout(self.layoutProfileCopySimVar)
        self.mainLayout.addLayout(self.layoutProfileCopyAccFunc)
        
        self.mainLayout.setAlignment(QtCore.Qt.AlignVCenter)
        #Musthave a layout that contain the layout and the buttonbox if we want to be able to center the widgets whil keeping the buttonbox at bottom
        self.additionalLayout = QtGui.QVBoxLayout()
        self.additionalLayout.addLayout(self.mainLayout)
        self.additionalLayout.addSpacing(50)
        self.additionalLayout.addWidget(self.buttonBox)
        
        Form.setLayout(self.additionalLayout)
        
        self.retranslateUi(Form)
        QtCore.QObject.connect(self.pushButton_add,QtCore.SIGNAL("clicked()"),self.addPop)
        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL("accepted()"), self.lookForAccept)
        QtCore.QObject.connect(self.buttonBox, QtCore.SIGNAL("rejected()"), Form.reject)
        QtCore.QMetaObject.connectSlotsByName(Form)           
                      
    def retranslateUi(self, Form):
        Form.setWindowTitle(QtGui.QApplication.translate("Form", "LSD - Profile adder", None, QtGui.QApplication.UnicodeUTF8))
        self.tableWidget.setEditTriggers(QtGui.QAbstractItemView.NoEditTriggers)
        
    def addPop(self):
        '''
        @summary Allow the user to add a demography file that wasn't listed at first by constructor
        '''
        newFileToAdd =  QtGui.QFileDialog.getOpenFileName(self, self.tr("Open population parameters file"),
                                                            os.getcwd(), self.tr("XML files (*.xml);;All files (*);;"))
        
        fileName = str(newFileToAdd).rsplit("/")[-1]
        self.tableWidget.insertRow(0)
        newItem = QtGui.QTableWidgetItem(fileName)
        newItem.setData(QtCore.Qt.UserRole, newFileToAdd)
        self.tableWidget.setItem(0,0,newItem)
        
    def lookForAccept(self):
        '''
        @summary Check if all fields were entered before closing dialog
        '''
        if not self.lineEdit_name.text():
            QtGui.QMessageBox.critical(self,"Cannot add Profile","Empty profile name!",QtGui.QMessageBox.Ok)
            return
        if not len(self.tableWidget.selectedItems()) == 1:
            QtGui.QMessageBox.critical(self,"Cannot add Profile","None or more than one population selected!",QtGui.QMessageBox.Ok)
            return
        if self.comboBox_simVariable.findText(self.lineEdit_name.text())!= -1:
            #Looking in comboBox, we don't need a model here to check
            QtGui.QMessageBox.critical(self,"Cannot add Profile","A Profile with this name already exists!",QtGui.QMessageBox.Ok)
            return
        self.accept()
        
